[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools>=61.2",
    "setuptools_scm",
]

[project]
authors = [{name = "Common Partial Wave Analysis", email = "compwa-admin@ep1.rub.de"}]
description = "Source code for the ComPWA Organization pages"
dynamic = ["version"]
license = {file = "LICENSE"}
maintainers = [{email = "compwa-admin@ep1.rub.de"}]
name = "compwa-github-io"
requires-python = ">=3.12"

[project.readme]
content-type = "text/markdown"
file = "README.md"

[project.urls]
Documentation = "https://compwa.github.io"
Source = "https://github.com/ComPWA/compwa.github.io"
Tracker = "https://github.com/ComPWA/compwa.github.io/issues"

[dependency-groups]
dev = [
    "ruff",
    "sphinx-autobuild",
    {include-group = "doc"},
    {include-group = "jupyter"},
    {include-group = "style"},
    {include-group = "test"},
]
doc = [
    "myst-nb",
    "sphinx",
    "sphinx-api-relink",
    "sphinx-book-theme",
    "sphinx-codeautolink[ipython]",
    "sphinx-comments",
    "sphinx-copybutton",
    "sphinx-design",
    "sphinx-hep-pdgref",
    "sphinx-pybtex-etal-style",
    "sphinx-remove-toctrees",
    "sphinx-reredirects",
    "sphinx-thebe",
    "sphinx-togglebutton",
    "sphinxcontrib-bibtex >=2",
    {include-group = "notebooks"},
]
jupyter = [
    "jupyterlab",
    "jupyterlab-code-formatter >=3.0.0",
    "jupyterlab-code-formatter",
    "jupyterlab-git",
    "jupyterlab-lsp",
    "jupyterlab-myst",
    "python-lsp-ruff",
    "python-lsp-server[rope]",
    {include-group = "notebooks"},
]
notebooks = [
    "black",
    "graphviz",
    "numpy",
    "sympy",
]
style = [
    "attrs",
    "nbformat",
    {include-group = "types"},
]
test = [
    "jupyter",
    "nbmake",
]
types = ["sphinx-api-relink"]

[tool.setuptools]
include-package-data = false

[tool.setuptools_scm]
write_to = "version.py"

[tool.pyright]
exclude = [
    "**/.git",
    "**/.ipynb_checkpoints",
    "**/.mypy_cache",
    "**/.pytest_cache",
    "**/.tox",
    "**/.venv/",
    "**/__pycache__",
    "**/_build",
]
reportGeneralTypeIssues = false
reportIncompatibleMethodOverride = false
reportMissingParameterType = false
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportOperatorIssue = false
reportOverlappingOverload = false
reportPrivateImportUsage = false
reportPrivateUsage = false
reportReturnType = false
reportUnboundVariable = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryComparison = false
reportUnnecessaryContains = false
reportUnnecessaryIsInstance = false
reportUntypedFunctionDecorator = false
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedImport = true
reportUnusedVariable = true
typeCheckingMode = "strict"
venv = ".venv"
venvPath = "."

[tool.pytest.ini_options]
addopts = [
    "--color=yes",
    "--doctest-continue-on-failure",
    "--doctest-modules",
    "--durations=0",
    "--ignore-glob=*/.ipynb_checkpoints/*",
    "--ignore=docs/adr/001/operators.ipynb",
    "--ignore=docs/adr/001/parameter_container.py",
    "--ignore=docs/adr/001/sympy.ipynb",
    "--ignore=docs/conf.py",
    "--nbmake",
    "--nbmake-timeout=0",
]
filterwarnings = [
    "error",
    "ignore:Passing a schema to Validator.iter_errors is deprecated.*:DeprecationWarning",
    "ignore:open_text is deprecated.*:DeprecationWarning",
    "ignore:read_text is deprecated.*:DeprecationWarning",
    "ignore:unclosed .*:ResourceWarning",
]
norecursedirs = [
    ".ipynb_checkpoints",
    ".virtual_documents",
    "_build",
]
testpaths = [
    ".pre-commit",
    "docs",
]

[tool.ruff]
extend-include = ["*.ipynb"]
preview = true
show-fixes = true

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"

[tool.ruff.lint]
ignore = [
    "ANN401",
    "ARG00",
    "COM812",
    "CPY001",
    "D101",
    "D102",
    "D103",
    "D105",
    "D107",
    "D203",
    "D213",
    "D407",
    "D416",
    "DOC",
    "E501",
    "FBT",
    "FURB101",
    "FURB103",
    "FURB140",
    "G004",
    "ISC001",
    "PLW1514",
    "PT001",
    "PTH",
    "SIM108",
    "SLF001",
]
select = ["ALL"]
task-tags = ["cspell"]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["display"]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.flake8-self]
ignore-names = [
    "_latex",
    "_print",
]

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"*.ipynb" = [
    "A003",
    "ANN",
    "B008",
    "B018",
    "C408",
    "C90",
    "D",
    "E303",
    "E402",
    "E703",
    "E741",
    "F404",
    "N802",
    "N803",
    "N806",
    "N807",
    "N815",
    "N816",
    "PD901",
    "PLC0415",
    "PLC2401",
    "PLR09",
    "PLR2004",
    "PLW0602",
    "PLW0603",
    "PLW2901",
    "PYI034",
    "RUF001",
    "RUF027",
    "S101",
    "S307",
    "T20",
    "TC00",
]
"**/003.ipynb" = ["B023", "PLC2701"]
"**/009.ipynb" = ["FURB113"]
"**/010.ipynb" = ["FURB113"]
"**/011.ipynb" = ["PLC2701", "PLR6301"]
"**/014.ipynb" = ["PLC2701"]
"**/016.ipynb" = ["PLC2701"]
"**/021.ipynb" = ["I001"]
"**/022.ipynb" = ["PLC2701"]
"**/024.ipynb" = ["E731", "E741", "S307"]
"**/025.ipynb" = ["E731"]
"**/98*.ipynb" = ["E731", "PLR6301"]
"docs/*" = [
    "D",
    "E402",
    "INP001",
    "S101",
    "S113",
    "T201",
]
"docs/conf.py" = [
    "A001",
    "D100",
    "PLC2701",
    "PLW2901",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.tomlsort]
all = false
ignore_case = true
in_place = true
sort_first = [
    "build-system",
    "project",
    "tool.setuptools",
    "tool.setuptools_scm",
    "tool.tox.env_run_base",
]
spaces_indent_inline_array = 4
trailing_comma_inline_array = true

[tool.tox]
env_list = [
    "docnb-force",
    "linkcheck",
    "sty",
]
no_package = true
requires = ["tox>=4.21.0"]
skip_install = true
skip_missing_interpreters = true

[tool.tox.env_run_base]
pass_env = ["*"]

[tool.tox.env.doc]
allowlist_externals = ["sphinx-build"]
commands = [
    [
        "sphinx-build",
        "--builder=html",
        "--fail-on-warning",
        "--keep-going",
        "--show-traceback",
        "docs/",
        "docs/_build/html/",
    ],
]
description = "Build documentation and API through Sphinx"
set_env.PYTHONWARNINGS = ""
set_env.TF_CPP_MIN_LOG_LEVEL = "3"
set_env.ZFIT_DISABLE_TF_WARNINGS = "1"

[tool.tox.env.doclive]
allowlist_externals = ["sphinx-autobuild"]
base = ["tool.tox.env_run_base", "tool.tox.env.doc"]
commands = [
    [
        "sphinx-autobuild",
        "--port=0",
        "--re-ignore=/__pycache__(/.*)?$",
        "--re-ignore=/_build(/.*)?$",
        "--re-ignore=/\\.cache(/.*)?$",
        "--re-ignore=/\\.egg-info(/.*)?$",
        "--re-ignore=/\\.ipynb_checkpoints(/.*)?$",
        "--re-ignore=/\\.virtual_documents(/.*)?$",
        "--re-ignore=/api(/.*)?$",
        "--re-ignore=/docs$",
        "--re-ignore=/version\\.py$",
        "--re-ignore=\\.egg-info(/.*)?$",
        "--re-ignore=\\.pkl$",
        "--re-ignore=\\.png$",
        "--re-ignore=\\.svg$",
        "--re-ignore=\\.yml$",
        "docs/",
        "docs/_build/html/",
    ],
]
description = "Set up a server to directly preview changes to the HTML pages"

[tool.tox.env.docnb]
base = ["tool.tox.env_run_base", "tool.tox.env.doc"]
description = "{[tool.tox.env.doc]description} with cached notebook execution"
set_env = [
    {replace = "ref", of = ["tool.tox.env.doc.set_env"]},
    {EXECUTE_NB = "yes"},
]

[tool.tox.env.docnb-force]
base = ["tool.tox.env_run_base", "tool.tox.env.doc"]
description = "{[tool.tox.env.doc]description} with notebook execution (no cache)"
set_env = [
    {replace = "ref", of = ["tool.tox.env.doc.set_env"]},
    {FORCE_EXECUTE_NB = "yes"},
]

[tool.tox.env.docnblive]
base = ["tool.tox.env_run_base", "tool.tox.env.doclive"]
description = "{[tool.tox.env.doclive]description} with cached notebook execution"
set_env = [
    {replace = "ref", of = ["tool.tox.env.doc.set_env"]},
    {EXECUTE_NB = "yes"},
]

[tool.tox.env.linkcheck]
base = ["tool.tox.env_run_base", "tool.tox.env.doc"]
commands = [
    [
        "sphinx-build",
        "--builder=linkcheck",
        "--show-traceback",
        "docs/",
        "docs/_build/linkcheck/",
    ],
]
description = "Check external links in the documentation (requires internet connection)"

[tool.tox.env.nb]
allowlist_externals = ["pytest"]
commands = [["pytest", "{posargs:docs}"]]
description = "Run all notebooks with pytest"

[tool.tox.env.sty]
allowlist_externals = ["pre-commit"]
commands = [["pre-commit", "run", "--all-files", "{posargs}"]]
description = "Perform all linting, formatting, and spelling checks"
